# Syntax

eol = ":" | "\n" | EOF

statement = (class | function | sub | dim | assignment | subCall | call | expr) eol

class = "class" identifier eol classDecl* "end" "class"
classDecl = (dim | function | sub) eol

function = "function" identifier "(" args ")" eol statements "end" "function"
sub = "sub" identifier ("(" args ")")? eol statements "end" "sub"
dim = "dim" identifier ("as" identifier)?

argList = argListArg "," argList | argListArg
argListArg = identifier

assignment = lvalue "=" expr
lvalue = variable | funcCall

funcCall = variable "(" args ")"
args = expr | expr "," args
call = "call" variable "(" args ")"

subCall = variable args

identifier = IDENTIFIER

if = "if" expr "then" eol statements ("elseif" condition  "then" eol statements)* ("else" eol statements)? "end" "if"

statements = statement*

variable = identifier | identifier "." variable


# Literals

string = "\"" stringChar* "\""
stringChar = . | ("\"\"" -> "\"")
